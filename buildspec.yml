version: 0.2

phases:
  install:
    runtime-versions:
      java: openjdk8

  pre_build:
    commands:
      # AWS 버전 확인
      - echo Logging in to Amazon ECR...
      - echo aws --version

      # ECR 로그인
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)

      # ECR Repository 설정
      - TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo $ECR_REPOSITORY_MATH_URI  # 012345678910.dkr.ecr.us-west-2.amazonaws.com/hello-world
      - echo $ECR_REPOSITORY_SCORE_URI  # 012345678910.dkr.ecr.us-west-2.amazonaws.com/hello-world
      - echo $ECR_REPOSITORY_EUREKA_URI  # 012345678910.dkr.ecr.us-west-2.amazonaws.com/hello-world
      - echo $TAG                         # 15ef8ba
      - MATH_IMAGE_URI=${ECR_REPOSITORY_MATH_URI}:${TAG}
      - SCORE_IMAGE_URI=${ECR_REPOSITORY_SCORE_URI}:${TAG}
      - EUREKA_IMAGE_URI=${ECR_REPOSITORY_EUREKA_URI}:${TAG}

  build:
    commands:
      # docker image build
      - echo Building the Docker image on `date`...
      - ./gradlew clean build
      - pwd
      - docker build -f ./math/Dockerfile -t $MATH_IMAGE_URI .
      - docker build -f ./score/Dockerfile -t $SCORE_IMAGE_URI .
      - docker build -f ./eureka/Dockerfile -t $EUREKA_IMAGE_URI .

  post_build:
    commands:
      # docker image를 ECR Repository로 push
      - echo Pushing the Docker images on `date`...
      - docker push $MATH_IMAGE_URI
      - docker push $SCORE_IMAGE_URI
      - docker push $EUREKA_IMAGE_URI

      # imagedefinition.json 생성
      - echo Writing image definitions file...
      - printf '[{"name":"%s","imageUri":"%s"},{"name":"%s","imageUri":"%s"},{"name":"%s","imageUri":"%s"}]' $MATH_CONTAINER_NAME $MATH_IMAGE_URI $SCORE_CONTAINER_NAME $SCORE_IMAGE_URI $EUREKA_CONTAINER_NAME $EUREKA_IMAGE_URI > imagedefinitions.json

artifacts:
  files: imagedefinitions.json